@page "/editproduct/{ProductId}"
@inject UseCases.UseCaseInterfaces.Products.IGetProductById getProductById
@inject UseCases.UseCaseInterfaces.Products.IEditProductUseCase editProductUseCase
@inject UseCases.UseCaseInterfaces.Categories.IViewCategoriesUseCase viewCategoriesUseCase
@inject NavigationManager navigationManager
<h3>Edit Product</h3>


@if (Product != null)
{
<EditForm Model="Product" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <div class="form-group">
        <label for="name ">Name</label>
        <InputText id="name" class="form-control" @bind-Value="Product.Name"></InputText>
    </div>
    <div class="form-group">
        <label for="Category ">Category</label>
        <InputSelect @bind-Value ="Product.CategoryId" class="form-control">
            @foreach (var category in Categories)
            {
                <option value="@category.CategoryId">@category.Name</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="Price ">Price</label>
        <InputNumber id="Price" class="form-control" @bind-Value="Product.Price"></InputNumber>
    </div>
    <div class="form-group">
        <label for="Quantity ">Quantity</label>
        <InputNumber id="Quantity" class="form-control" @bind-Value="Product.Quantity"></InputNumber>
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-success" @onclick="() => BackToProducts()">Back</button>


</EditForm>
}

@code {
    [Parameter]
    public string ProductId { get; set; }

    private Product Product;
    private IEnumerable<Category> Categories;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Categories = viewCategoriesUseCase.Execute();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (int.TryParse(ProductId, out int iProductId))
        {
            this.Product = getProductById.Execute(iProductId);
        }
    }
    private void OnValidSubmit()
    {
        editProductUseCase.Execute(Product);
        navigationManager.NavigateTo("/products");
    }

    private void BackToProducts()
    {
        navigationManager.NavigateTo("products");
    }


}
