@inject UseCases.UseCaseInterfaces.Products.IGetProductsByCategoryIdUseCase getProdyctsByCategoryIdUseCase
@inject UseCases.UseCaseInterfaces.Categories.IViewCategoriesUseCase viewCategoryUseCase


<div class="form-group">
    <label for="categoryId">Category</label>
    <select id="categoryId" @bind ="SelectedCategoryId" class="form-control">
        @foreach (var category in Categories)
        {
            <option value="@category.CategoryId">@category.Name</option>
        }
    </select>
</div>
@if(ProductsInCategory != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Product Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in ProductsInCategory)
            {
                <tr style="@(product.ProductId == selectedProductId ? "background-color: green; cursor: pointer;": "cursor: pointer")" @onclick="() => OnSelectProduct(product)">
                    <td>@product.Name</td>
                    <td>@product.Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private IEnumerable<Category> Categories;
    private IEnumerable<Product> ProductsInCategory;
    public int selectedProductId { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductSelected { get; set; }

    private int selectedCategoryId;
    public int SelectedCategoryId
    {
        get
        {
            return selectedCategoryId;
        }
        set
        {
            selectedCategoryId = value;
            ProductsInCategory = getProdyctsByCategoryIdUseCase.Execute(value);
            OnSelectProduct(null);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Categories = viewCategoryUseCase.Execute();
    }

    private async Task OnSelectProduct(Product product)
    {
        await OnProductSelected.InvokeAsync(product);
        if(product != null) selectedProductId = product.ProductId;
    }
}
